<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxl.common.mapper.AdminRoleUserMapper" >

    <resultMap id="BaseResultMap" type="com.lxl.common.models.AdminRoleUser" >
        <result column="admin_role_user_id" property="adminRoleUserId" jdbcType="INTEGER" />
        <result column="admin_role_user_admin_role_id" property="adminRoleUserAdminRoleId" jdbcType="INTEGER" />
        <result column="admin_role_user_admin_user_id" property="adminRoleUserAdminUserId" jdbcType="INTEGER" />
        <result column="admin_role_user_create_at" property="adminRoleUserCreateAt" jdbcType="TIMESTAMP" />
        <result column="admin_role_user_update_at" property="adminRoleUserUpdateAt" jdbcType="TIMESTAMP" />
        <result column="admin_role_user_create_by" property="adminRoleUserCreateBy" jdbcType="VARCHAR" />
        <result column="admin_role_user_update_by" property="adminRoleUserUpdateBy" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        admin_role_user_id, admin_role_user_admin_role_id, admin_role_user_admin_user_id, admin_role_user_create_at, admin_role_user_update_at, admin_role_user_create_by, admin_role_user_update_by
    </sql>

    <!-- 根据用户ID 查询角色 -->
    <select id="findRolesByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        SELECT
        <include refid="Base_Column_List" />
        FROM admin_role_user
        WHERE admin_role_user_admin_user_id = #{userId,jdbcType=INTEGER}
    </select>

    <select id="findOneById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        SELECT
        <include refid="Base_Column_List" />
        FROM admin_role_user
        WHERE admin_role_user_id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteOneById" parameterType="java.lang.Integer" >
        DELETE FROM admin_role_user
        WHERE admin_role_user_id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.lxl.common.models.AdminRoleUser" >
        INSERT INTO HOUSE (admin_role_user_id, admin_role_user_admin_role_id, admin_role_user_admin_user_id, admin_role_user_create_at, admin_role_user_update_at, admin_role_user_create_by, admin_role_user_update_by)
        VALUES (#{adminRoleUserId,jdbcType=INTEGER}, #{adminRoleUserAdminRoleId,jdbcType=INTEGER}, #{adminRoleUserAdminUserId,jdbcType=INTEGER}, #{adminRoleUserCreateAt,jdbcType=TIMESTAMP}, #{adminRoleUserUpdateAt,jdbcType=TIMESTAMP}, #{adminRoleUserCreateBy,jdbcType=VARCHAR}, #{adminRoleUserUpdateBy,jdbcType=VARCHAR})
    </insert>

    <insert id="insertByParams" parameterType="com.lxl.common.models.AdminRoleUser" >
        INSERT INTO admin_role_user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="adminRoleUserId != null" >
                admin_role_user_id,
            </if>
            <if test="adminRoleUserAdminRoleId != null" >
                admin_role_user_admin_role_id,
            </if>
            <if test="adminRoleUserAdminUserId != null" >
                admin_role_user_admin_user_id,
            </if>
            <if test="adminRoleUserCreateAt != null" >
                admin_role_user_create_at,
            </if>
            <if test="adminRoleUserUpdateAt != null" >
                admin_role_user_update_at,
            </if>
            <if test="adminRoleUserCreateBy != null" >
                admin_role_user_create_by,
            </if>
            <if test="adminRoleUserUpdateBy != null" >
                admin_role_user_update_by,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="adminRoleUserId != null" >
                #{adminRoleUserId,jdbcType=INTEGER},
            </if>
            <if test="adminRoleUserAdminRoleId != null" >
                #{adminRoleUserAdminRoleId,jdbcType=INTEGER},
            </if>
            <if test="adminRoleUserAdminUserId != null" >
                #{adminRoleUserAdminUserId,jdbcType=INTEGER},
            </if>
            <if test="adminRoleUserCreateAt != null" >
                #{adminRoleUserCreateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="adminRoleUserUpdateAt != null" >
                #{adminRoleUserUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="adminRoleUserCreateBy != null" >
                #{adminRoleUserCreateBy,jdbcType=VARCHAR},
            </if>
            <if test="adminRoleUserUpdateBy != null" >
                #{adminRoleUserUpdateBy,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByIdAndParams" parameterType="com.lxl.common.models.AdminRoleUser" >
        update admin_role_user
        <set>
            <if test="adminRoleUserAdminRoleId != null" >
                admin_role_user_admin_role_id = #{adminRoleUserAdminRoleId,jdbcType=INTEGER},
            </if>
            <if test="adminRoleUserAdminUserId != null" >
                admin_role_user_admin_user_id = #{adminRoleUserAdminUserId,jdbcType=INTEGER},
            </if>
            <if test="adminRoleUserCreateAt != null" >
                admin_role_user_create_at = #{adminRoleUserCreateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="adminRoleUserUpdateAt != null" >
                admin_role_user_update_at = #{adminRoleUserUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="adminRoleUserCreateBy != null" >
                admin_role_user_create_by = #{adminRoleUserCreateBy,jdbcType=VARCHAR},
            </if>
            <if test="adminRoleUserUpdateBy != null" >
                admin_role_user_update_by = #{adminRoleUserUpdateBy,jdbcType=VARCHAR},
            </if>
        </set>
        where admin_role_user_id = #{adminRoleUserId,jdbcType=INTEGER}
    </update>

    <select id="findByParams" resultMap="BaseResultMap" parameterType="com.lxl.common.models.AdminRoleUser">
        SELECT
        <include refid="Base_Column_List" />
        FROM admin_role_user
        <where>
            <if test="adminRoleUserId != null" >
                AND admin_role_user_id = #{adminRoleUserId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserAdminRoleId != null" >
                AND admin_role_user_admin_role_id = #{adminRoleUserAdminRoleId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserAdminUserId != null" >
                AND admin_role_user_admin_user_id = #{adminRoleUserAdminUserId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserCreateAt != null" >
                AND admin_role_user_create_at = #{adminRoleUserCreateAt,jdbcType=TIMESTAMP}
            </if>
            <if test="adminRoleUserUpdateAt != null" >
                AND admin_role_user_update_at = #{adminRoleUserUpdateAt,jdbcType=TIMESTAMP}
            </if>
            <if test="adminRoleUserCreateBy != null" >
                AND admin_role_user_create_by = #{adminRoleUserCreateBy,jdbcType=VARCHAR}
            </if>
            <if test="adminRoleUserUpdateBy != null" >
                AND admin_role_user_update_by = #{adminRoleUserUpdateBy,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY admin_role_user_id DESC
    </select>

    <select id="findTotalByParams" resultType="java.lang.Integer" parameterType="com.lxl.common.models.AdminRoleUser">
        SELECT COUNT(*) FROM admin_role_user
        <where>
            <if test="adminRoleUserId != null" >
                AND admin_role_user_id = #{adminRoleUserId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserAdminRoleId != null" >
                AND admin_role_user_admin_role_id = #{adminRoleUserAdminRoleId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserAdminUserId != null" >
                AND admin_role_user_admin_user_id = #{adminRoleUserAdminUserId,jdbcType=INTEGER}
            </if>
            <if test="adminRoleUserCreateAt != null" >
                AND admin_role_user_create_at = #{adminRoleUserCreateAt,jdbcType=TIMESTAMP}
            </if>
            <if test="adminRoleUserUpdateAt != null" >
                AND admin_role_user_update_at = #{adminRoleUserUpdateAt,jdbcType=TIMESTAMP}
            </if>
            <if test="adminRoleUserCreateBy != null" >
                AND admin_role_user_create_by = #{adminRoleUserCreateBy,jdbcType=VARCHAR}
            </if>
            <if test="adminRoleUserUpdateBy != null" >
                AND admin_role_user_update_by = #{adminRoleUserUpdateBy,jdbcType=VARCHAR}
            </if>
        </where>
    </select>
</mapper>